--[[
    init.lua
    Created: 02/15/2023 13:29:19
    Description: Autogenerated script file for the map drenchedbluff.
]]--
-- Commonly included lua functions and data
require 'what_does_n_stand_for.common'

-- Package name
local drenchedbluff = {}

-------------------------------
-- Zone Callbacks
-------------------------------
---drenchedbluff.Init
--Engine callback function
function drenchedbluff.Init(zone)


end

---drenchedbluff.EnterSegment
--Engine callback function
function drenchedbluff.EnterSegment(zone, rescuing, segmentID, mapID)
  if rescuing ~= true then
    COMMON.BeginDungeon(zone.ID, segmentID, mapID)
  end
end

---drenchedbluff.ExitSegment
--Engine callback function
function drenchedbluff.ExitSegment(zone, result, rescue, segmentID, mapID)
 --Enable debugging this coroutine
  PrintInfo("=>> ExitSegment_drenchedbluff result "..tostring(result).." segment "..tostring(segmentID))
  
  --first check for rescue flag; if we're in rescue mode then take a different path
  COMMON.ExitDungeonMissionCheck(result, rescue, zoneId, segmentID)
  if rescue == true then
    COMMON.EndRescue(zone, result, segmentID)
  elseif result ~= RogueEssence.Data.GameProgress.ResultType.Cleared then
    SV.dungeons.drenchedbluff_fail = true
    COMMON.EndDungeonDay(result, SV.checkpoint.Zone, SV.checkpoint.Segment, SV.checkpoint.Map, SV.checkpoint.Entry)
  else
    if segmentID == 0 then
	  if not SV.dungeons.drenchedbluff then --if it wasn't completed, do not hide results.
	  SV.branchwaywoodsentrance.DungeonComplete = true
	  end
	  --GAME:EnterZone('drenchedbluff', -1, 0, 0)
      COMMON.EndDungeonDay(result, 'drenchedbluff', -1, 0, 0)
    else
      PrintInfo("No exit procedure found!")
      COMMON.EndDungeonDay(result, SV.checkpoint.Zone, SV.checkpoint.Segment, SV.checkpoint.Map, SV.checkpoint.Entry)
    end
  end

end

---drenchedbluff.Rescued
--Engine callback function
function drenchedbluff.Rescued(zone, name, mail)
	COMMON.Rescued(zone, name, mail)
end

return drenchedbluff


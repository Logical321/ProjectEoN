--[[
    init.lua
    Created: 12/05/2022 16:00:45
    Description: Autogenerated script file for the map e.
]]--
-- Commonly included lua functions and data
require 'what_does_n_stand_for.common'

-- Package name
local treasuretown1 = {}

-- Local, localized strings table
-- Use this to display the named strings you added in the strings files for the map!
-- Ex:
--      local localizedstring = STRINGS.MapStrings['SomeStringName']


-------------------------------
-- Map Callbacks
-------------------------------
---treasuretown1.Init
--Engine callback function
function treasuretown1.Init(map)

  --This will fill the localized strings table automatically based on the locale the game is 
  -- currently in. You can use the MapStrings table after this line!
   --Is this even used anymore?

end

---treasuretown1.Enter
--Engine callback function
function treasuretown1.Enter(map)

treasuretown1.chapterhidescript()
treasuretown1.default_initialize(wanderzoneloc, wanderzonesize, wanderspeed, wanderstepmin, wanderstepmax, idledelaymin, idledelaymax)

if SV.chapter.number == 1 and SV.chapter1.meeting_partB then
GROUND:Hide("ShopGreen")
GROUND:TeleportTo(CH('kecleonmain'), 316, 185, Direction.UpRight)
end

COMMON.WeatherApply()

GAME:FadeIn(20)

end

---treasuretown1.Exit
--Engine callback function
function treasuretown1.Exit(map)


end

---treasuretown1.Update
--Engine callback function
function treasuretown1.Update(map)


end

---treasuretown1.GameSave
--Engine callback function
function treasuretown1.GameSave(map)


end

---treasuretown1.GameLoad
--Engine callback function
function treasuretown1.GameLoad(map)

  GAME:FadeIn(20)

end

-------------------------------
-- Entities Callbacks
-------------------------------

function treasuretown1.Surprise_Sequence(character) --Depreciated.
	GROUND:CharSetEmote(character, "shock", 1)
	GROUND:CharSetEmote(character, "shock", 1)
	GROUND:CharSetEmote(character, "shock", 1)
end

function treasuretown1.TreasureTownRightEntrance_Touch(obj, activator)

GAME:FadeOut(false, 20)
GAME:EnterGroundMap("treasuretown2", "EntranceLeft")

end

function treasuretown1.kecleonsub_Action(chara, activator)

UI:SetSpeaker(chara)
UI:SetSpeakerEmotion("Normal")

UI:WaitShowDialogue("Testing Dialogue. Get out of here, cheater.")

end

function treasuretown1.kecleonmain_Action(chara, activator)
local KecleonMain = CH('Kecleon')

if SV.chapter.number == 1 and SV.chapter1.meeting_partB and not SV.chapter1.greenkecleon_dialogue then

UI:SetSpeaker(chara)
UI:SetSpeakerEmotion("Normal")
UI:WaitShowDialogue("I hope my brother can take care of the shop while I'm gone...")
UI:SetSpeakerEmotion("Worried")
UI:WaitShowDialogue("Though I shouldn't just stand here guessing if it's a big busy day, [pause=10]or measly short business...")

SOUND:PlayBattleSE("EVT_Emote_Exclaim_2")
GROUND:CharSetEmote(chara, "exclaim", 1)
GAME:WaitFrames(40)

GROUND:CharTurnToCharAnimated(chara, activator, 4)

UI:SetSpeakerEmotion("Normal")
UI:WaitShowDialogue("Oh, [pause=10]hey there. [pause=0][color=#54ebaf]Madilyn[color] went ahead already. [pause=0]She's waiting at the crossroads for us.")
UI:SetSpeakerEmotion("Happy")
UI:WaitShowDialogue("However, [pause=10]if you need to buy something, [pause=10]I won't say no to that. â™ª")

GAME:WaitFrames(10)
SV.chapter1.greenkecleon_dialogue = true
end
treasuretown1.ShopGreen_Action(obj, activator)
GROUND:EntTurn(chara, Direction.UpRight)
end

function treasuretown1.SharpedoBluffEntrance_Touch(obj, activator)

GAME:FadeOut(false, 20)
GAME:EnterGroundMap("sharpedobluff", "EntranceA")

end

function treasuretown1.GoodbyePlayer_Sequence(character) --maybe animate normally by cutting pieces of MoveInDirection up? / DEPRECIATED
	GROUND:CharAnimateTurn(character, Direction.Right, 3, true)
	GROUND:CharAnimateTurn(character, Direction.Right, 3, true)
	GROUND:MoveInDirection(player, Direction.Right, 90, false, 2)
end

function treasuretown1.Storage_Action(obj, activator)
local StorageKeeper = CH("StorageKeeper")
local player = CH("PLAYER")

GROUND:CharTurnToChar(storagekeeper, player) --bruh why does this work
GROUND:CharTurnToChar(player, storagekeeper)

	UI:SetSpeaker(StorageKeeper)
	UI:SetSpeakerEmotion("Happy")
	UI:WaitShowDialogue("Hello, [pause=10]and welcome to the [color=#FFC663]Kangaskhan Storage[color]!")

  local state = 0
  local repeated = false
  
  while state > -1 do
    
	local has_items = GAME:GetPlayerBagCount() + GAME:GetPlayerEquippedCount() > 0
	local has_storage = GAME:GetPlayerStorageCount() > 0
	
	UI:SetSpeakerEmotion("Normal")
	local msg = STRINGS:Format(STRINGS.MapStrings['Storage_Menu_Dialogue'])
			if repeated == true then
			UI:SetSpeakerEmotion("Normal")
				msg = STRINGS:Format(STRINGS.MapStrings['Storage_Menu_Return'])
			end
	local storage_choices = { { STRINGS:Format(STRINGS.MapStrings['Storage_Menu_Store']), has_items},
	{ STRINGS:Format(STRINGS.MapStrings['Storage_Menu_Take']), has_storage},
	{ STRINGS:Format(STRINGS.MapStrings['Storage_Menu_All']), has_items},
	--{ STRINGS:FormatKey("MENU_STORAGE_MONEY"), true}, --Get bent, I stole this from common.lua, changed it and it works.
	{ STRINGS:Format(STRINGS.MapStrings['Storage_Menu_Stop']), true}}
	UI:BeginChoiceMenu(msg, storage_choices, 1, 4)
	--UI:BeginChoiceMenu(STRINGS:Format(STRINGS.MapStrings['Storage_Menu_Dialogue']), storage_choices, 1, 4) --Use this if the one above causes problems.
	UI:WaitForChoice()
	local result = UI:ChoiceResult()
	repeated = true
	
	if result == 1 then
	  UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Storage_Menu_Storing'], STRINGS:LocalKeyString(26)))
	  UI:StorageMenu()
	  UI:WaitForChoice()
	elseif result == 2 then
	UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Storage_Menu_Taking'], STRINGS:LocalKeyString(26)))
	  UI:WithdrawMenu()
	  UI:WaitForChoice()
    elseif result == 3 then
		UI:SetSpeakerEmotion("Normal")
	    UI:ChoiceMenuYesNo(STRINGS:Format(STRINGS.MapStrings['Storage_Menu_Confirm']), false);
	    UI:WaitForChoice()
	    if UI:ChoiceResult() then
			 UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Storage_Menu_Confirmed']))
			 GAME:DepositAll()
	    end
	
	elseif result == 4 then
	  state = -1
	end
	
  end

	UI:SetSpeaker(StorageKeeper)
	UI:SetSpeakerEmotion("Happy")
	UI:WaitShowDialogue("Your things will be safe with me, [pause=10]I promise. [pause=0]Have a good day now!")
	
	GROUND:EntTurn(storagekeeper, Direction.Down)
end

function treasuretown1.ShopGreen_Action(obj, activator)
local kecleonmain = CH("kecleonmain")
local player = CH("PLAYER")

GROUND:CharTurnToChar(kecleonmain, player)
GROUND:CharTurnToChar(player, kecleonmain)
							--Copy+Paste the shop script for this one, somehow find a way to shift the Shop Item pools so that Green doesn't sell Orbs, TMs, and other magic stuff.
   --Enable debugging this coroutine
  
  local state = 0
  local repeated = false
  local cart = {}
  local catalog = { }
  for ii = 1, #SV.shopgreenALT, 1 do
	local base_data = SV.shopgreenALT[ii]
	local item_data = { Item = RogueEssence.Dungeon.InvItem(base_data.Index, false, base_data.Amount), Price = base_data.Price }
	table.insert(catalog, item_data)
  end

  UI:SetSpeaker(kecleonmain)
  
	while state > -1 do
		if state == 0 then
			UI:SetSpeakerEmotion("Happy")
			local msg = STRINGS:Format(STRINGS.MapStrings['Shop_Intro'])
			if repeated == true then
			UI:SetSpeakerEmotion("Happy")
				msg = STRINGS:Format(STRINGS.MapStrings['Shop_Intro_Return'])
			end
			local shop_choices = {STRINGS:Format(STRINGS.MapStrings['Shop_Option_Buy']), STRINGS:Format(STRINGS.MapStrings['Shop_Option_Sell']),
			STRINGS:FormatKey("MENU_INFO"),
			STRINGS:FormatKey("MENU_EXIT")}
			UI:BeginChoiceMenu(msg, shop_choices, 1, 4)
			UI:WaitForChoice()
			local result = UI:ChoiceResult()
			repeated = true
			if result == 1 then
				if #catalog > 0 then
					--TODO: use the enum instead of a hardcoded number
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Buy'], STRINGS:LocalKeyString(26)))
					state = 1
				else
					UI:SetSpeakerEmotion("Worried")
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Buy_Empty']))
				end
			elseif result == 2 then
				local bag_count = GAME:GetPlayerBagCount() + GAME:GetPlayerEquippedCount()
				if bag_count > 0 then
					--TODO: use the enum instead of a hardcoded number
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Sell'], STRINGS:LocalKeyString(26)))
					state = 3
				else
					UI:SetSpeakerEmotion("Stunned")
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Bag_Empty']))
					UI:SetSpeakerEmotion("Normal")
				end
			elseif result == 3 then
				UI:SetSpeakerEmotion("Surprised")
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Info_001']))
				UI:SetSpeakerEmotion("Normal")
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Info_002']))
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Info_003']))
			else
				UI:SetSpeakerEmotion("Happy")
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Goodbye']))
				state = -1
			end
		elseif state == 1 then
			UI:ShopMenu(catalog)
			UI:WaitForChoice()
			local result = UI:ChoiceResult()
			if #result > 0 then
				local bag_count = GAME:GetPlayerBagCount() + GAME:GetPlayerEquippedCount()
				local bag_cap = GAME:GetPlayerBagLimit()
				if bag_count == bag_cap then
					UI:SetSpeakerEmotion("Worried")
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Bag_Full']))
					UI:SetSpeakerEmotion("Normal")
				else
					cart = result
					state = 2
				end
			else
				state = 0
			end
		elseif state == 2 then
			local total = 0
			for ii = 1, #cart, 1 do
				total = total + catalog[cart[ii]].Price
			end
			local msg
			if total > GAME:GetPlayerMoney() then
				UI:SetSpeakerEmotion("Angry")
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Buy_No_Money']))
				UI:SetSpeakerEmotion("Normal")
				state = 1
			else
				if #cart == 1 then
					local name = catalog[cart[1]].Item:GetDisplayName()
					msg = STRINGS:Format(STRINGS.MapStrings['Shop_Buy_One'], STRINGS:FormatKey("MONEY_AMOUNT", total), name)
				else
					msg = STRINGS:Format(STRINGS.MapStrings['Shop_Buy_Multi'], STRINGS:FormatKey("MONEY_AMOUNT", total))
				end
				UI:ChoiceMenuYesNo(msg, false)
				UI:WaitForChoice()
				result = UI:ChoiceResult()
				
				if result then
					GAME:RemoveFromPlayerMoney(total)
					for ii = 1, #cart, 1 do
						local item = catalog[cart[ii]].Item
						GAME:GivePlayerItem(item.ID, item.Amount, false)
					end
					for ii = #cart, 1, -1 do
						table.remove(catalog, cart[ii])
						table.remove(SV.shopgreenALT, cart[ii])
					end
					
					cart = {}
					SOUND:PlayBattleSE("DUN_Money")
					UI:SetSpeakerEmotion("Happy")
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Buy_Complete']))
					state = 0
				else
					state = 1
				end
			end
		elseif state == 3 then
			UI:SellMenu()
			UI:WaitForChoice()
			local result = UI:ChoiceResult()
			
			if #result > 0 then
				cart = result
				state = 4
			else
				state = 0
			end
		elseif state == 4 then
			local total = 0
			for ii = 1, #cart, 1 do
				local item
				if cart[ii].IsEquipped then
					item = GAME:GetPlayerEquippedItem(cart[ii].Slot)
				else
					item = GAME:GetPlayerBagItem(cart[ii].Slot)
				end
				total = total + item:GetSellValue()
			end
			local msg
			if #cart == 1 then
				local item
				if cart[1].IsEquipped then
					item = GAME:GetPlayerEquippedItem(cart[1].Slot)
				else
					item = GAME:GetPlayerBagItem(cart[1].Slot)
				end
				msg = STRINGS:Format(STRINGS.MapStrings['Shop_Sell_One'], STRINGS:FormatKey("MONEY_AMOUNT", total), item:GetDisplayName())
			else
				msg = STRINGS:Format(STRINGS.MapStrings['Shop_Sell_Multi'], STRINGS:FormatKey("MONEY_AMOUNT", total))
			end
			UI:ChoiceMenuYesNo(msg, false)
			UI:WaitForChoice()
			result = UI:ChoiceResult()
			
			if result then
				for ii = #cart, 1, -1 do
					if cart[ii].IsEquipped then
						GAME:TakePlayerEquippedItem(cart[ii].Slot)
					else
						GAME:TakePlayerBagItem(cart[ii].Slot)
					end
				end
				SOUND:PlayBattleSE("DUN_Money")
				GAME:AddToPlayerMoney(total)
				cart = {}
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Sell_Complete']))
				state = 0
			else
				state = 3
			end
		end
	end
	
GROUND:EntTurn(kecleonmain, Direction.Down)
end

function treasuretown1.ShopPurple_Action(obj, activator)
local kecleonsub = CH("kecleonsub")
local player = CH("PLAYER")

GROUND:CharTurnToChar(kecleonsub, player)
GROUND:CharTurnToChar(player, kecleonsub)
							--Copy+Paste the shop script for this one, somehow find a way to shift the Shop Item pools so that Green doesn't sell Orbs, TMs, and other magic stuff.
   --Enable debugging this coroutine
   
   if SV.chapter.number == 1 and SV.chapter1.meeting_partB and not SV.chapter1.purplekecleon_dialogue then
   
   UI:SetSpeaker(kecleonsub)
   UI:SetSpeakerEmotion("Normal")
   UI:WaitShowDialogue("I hope you know what you're doing, [pause=10]helping my brother keep this storefront a-float.")
   UI:WaitShowDialogue("He usually never travels, [pause=10]so expect him to be a little weak, [pause=10]okay?")
   UI:WaitShowDialogue("Now, [pause=10]let's get to business...")
   
   GAME:WaitFrames(10)
   SV.chapter1.purplekecleon_dialogue = true
   end
  
  local state = 0
  local repeated = false
  local cart = {}
  local catalog = { }
  for ii = 1, #SV.shoppurple, 1 do
	local base_data = SV.shoppurple[ii]
	local item_data = { Item = RogueEssence.Dungeon.InvItem(base_data.Index, false, base_data.Amount), Price = base_data.Price }
	table.insert(catalog, item_data)
  end

  UI:SetSpeaker(kecleonsub)
  
	while state > -1 do
		if state == 0 then
			UI:SetSpeakerEmotion("Happy")
			local msg = STRINGS:Format(STRINGS.MapStrings['Shop_Intro'])
			if repeated == true then
			UI:SetSpeakerEmotion("Happy")
				msg = STRINGS:Format(STRINGS.MapStrings['Shop_Intro_Return'])
			end
			local shop_choices = {STRINGS:Format(STRINGS.MapStrings['Shop_Option_Buy']), STRINGS:Format(STRINGS.MapStrings['Shop_Option_Sell']),
			STRINGS:FormatKey("MENU_INFO"),
			STRINGS:FormatKey("MENU_EXIT")}
			UI:BeginChoiceMenu(msg, shop_choices, 1, 4)
			UI:WaitForChoice()
			local result = UI:ChoiceResult()
			repeated = true
			if result == 1 then
				if #catalog > 0 then
					--TODO: use the enum instead of a hardcoded number
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Buy'], STRINGS:LocalKeyString(26)))
					state = 1
				else
					UI:SetSpeakerEmotion("Worried")
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Buy_Empty']))
				end
			elseif result == 2 then
				local bag_count = GAME:GetPlayerBagCount() + GAME:GetPlayerEquippedCount()
				if bag_count > 0 then
					--TODO: use the enum instead of a hardcoded number
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Sell'], STRINGS:LocalKeyString(26)))
					state = 3
				else
					UI:SetSpeakerEmotion("Stunned")
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Bag_Empty']))
					UI:SetSpeakerEmotion("Normal")
				end
			elseif result == 3 then
				UI:SetSpeakerEmotion("Normal")
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Purple_Info1']))
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Purple_Info2']))
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Purple_Info3']))
			else
				UI:SetSpeakerEmotion("Happy")
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Goodbye']))
				state = -1
			end
		elseif state == 1 then
			UI:ShopMenu(catalog)
			UI:WaitForChoice()
			local result = UI:ChoiceResult()
			if #result > 0 then
				local bag_count = GAME:GetPlayerBagCount() + GAME:GetPlayerEquippedCount()
				local bag_cap = GAME:GetPlayerBagLimit()
				if bag_count == bag_cap then
					UI:SetSpeakerEmotion("Worried")
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Bag_Full']))
					UI:SetSpeakerEmotion("Normal")
				else
					cart = result
					state = 2
				end
			else
				state = 0
			end
		elseif state == 2 then
			local total = 0
			for ii = 1, #cart, 1 do
				total = total + catalog[cart[ii]].Price
			end
			local msg
			if total > GAME:GetPlayerMoney() then
				UI:SetSpeakerEmotion("Angry")
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Buy_No_Money']))
				UI:SetSpeakerEmotion("Normal")
				state = 1
			else
				if #cart == 1 then
					local name = catalog[cart[1]].Item:GetDisplayName()
					msg = STRINGS:Format(STRINGS.MapStrings['Shop_Buy_One'], STRINGS:FormatKey("MONEY_AMOUNT", total), name)
				else
					msg = STRINGS:Format(STRINGS.MapStrings['Shop_Buy_Multi'], STRINGS:FormatKey("MONEY_AMOUNT", total))
				end
				UI:ChoiceMenuYesNo(msg, false)
				UI:WaitForChoice()
				result = UI:ChoiceResult()
				
				if result then
					GAME:RemoveFromPlayerMoney(total)
					for ii = 1, #cart, 1 do
						local item = catalog[cart[ii]].Item
						GAME:GivePlayerItem(item.ID, item.Amount, false)
					end
					for ii = #cart, 1, -1 do
						table.remove(catalog, cart[ii])
						table.remove(SV.shoppurple, cart[ii])
					end
					
					cart = {}
					SOUND:PlayBattleSE("DUN_Money")
					UI:SetSpeakerEmotion("Happy")
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Buy_Complete']))
					state = 0
				else
					state = 1
				end
			end
		elseif state == 3 then
			UI:SellMenu()
			UI:WaitForChoice()
			local result = UI:ChoiceResult()
			
			if #result > 0 then
				cart = result
				state = 4
			else
				state = 0
			end
		elseif state == 4 then
			local total = 0
			for ii = 1, #cart, 1 do
				local item
				if cart[ii].IsEquipped then
					item = GAME:GetPlayerEquippedItem(cart[ii].Slot)
				else
					item = GAME:GetPlayerBagItem(cart[ii].Slot)
				end
				total = total + item:GetSellValue()
			end
			local msg
			if #cart == 1 then
				local item
				if cart[1].IsEquipped then
					item = GAME:GetPlayerEquippedItem(cart[1].Slot)
				else
					item = GAME:GetPlayerBagItem(cart[1].Slot)
				end
				msg = STRINGS:Format(STRINGS.MapStrings['Shop_Sell_One'], STRINGS:FormatKey("MONEY_AMOUNT", total), item:GetDisplayName())
			else
				msg = STRINGS:Format(STRINGS.MapStrings['Shop_Sell_Multi'], STRINGS:FormatKey("MONEY_AMOUNT", total))
			end
			UI:ChoiceMenuYesNo(msg, false)
			UI:WaitForChoice()
			result = UI:ChoiceResult()
			
			if result then
				for ii = #cart, 1, -1 do
					if cart[ii].IsEquipped then
						GAME:TakePlayerEquippedItem(cart[ii].Slot)
					else
						GAME:TakePlayerBagItem(cart[ii].Slot)
					end
				end
				SOUND:PlayBattleSE("DUN_Money")
				GAME:AddToPlayerMoney(total)
				cart = {}
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Sell_Complete']))
				state = 0
			else
				state = 3
			end
		end
	end
GROUND:EntTurn(kecleonsub, Direction.Down)
end

function treasuretown1.BoxBreakerButton_Action(obj, activator) --fix later. / It's literally broken, as Base Town's box breaking stuff updated.
local BoxBreaker = CH("BoxBreaker")
local player = CH("PLAYER")

GROUND:CharTurnToChar(BoxBreaker, player)
GROUND:CharTurnToChar(player, BoxBreaker)

	UI:SetSpeaker(BoxBreaker)
	UI:SetSpeakerEmotion("Normal")
	--Temporary shutdown so nobody can softlock their game.
	UI:WaitShowDialogue("It appears my powers are not back yet...")
	UI:WaitShowDialogue("Your inconvinience is noted, [pause=10]dear customer.")
	
GROUND:EntTurn(BoxBreaker, Direction.Down)
end

function treasuretown1.SignLeft_Action(obj, activator)

  UI:ResetSpeaker()
  UI:SetCenter(true)
  UI:SetAutoFinish(true)
  
  UI:WaitShowDialogue("<-- [color=#FFC663]Sharpedo Bluff[color]")
  
  UI:SetCenter(false)
  UI:SetAutoFinish(false)

end

function treasuretown1.SignRight_Action(obj, activator)

  UI:ResetSpeaker()
  UI:SetCenter(true)
  UI:SetAutoFinish(true)
  
  UI:WaitShowDialogue("Bank, Link Shop, Dojo, Daycare -->")
  
  UI:SetCenter(false)
  UI:SetAutoFinish(false)

end

function treasuretown1.Swellow_Action(chara, activator)
local player = CH('PLAYER')

GROUND:CharTurnToChar(chara, player)

UI:SetSpeaker(chara)
UI:SetSpeakerEmotion("Normal")
UI:WaitShowDialogue("You rarely see solo adventurers.")
UI:WaitShowDialogue("Unless you count the one member Team [color=#ffb5fd]Electrater[color] has...")
UI:WaitShowDialogue("But she's kind of scary to talk to.")

GROUND:EntTurn(chara, Direction.DownLeft)
end

function treasuretown1.Beautifly_Action(chara, activator)
local player = CH('PLAYER')

GROUND:CharTurnToChar(chara, player)

UI:SetSpeaker(chara)
UI:SetSpeakerEmotion("Normal")
UI:WaitShowDialogue("You grow stronger by understanding your weaknesses and fears.")
UI:WaitShowDialogue("This goes for having a team of four, [pause=10]or by yourself.")

GROUND:EntTurn(chara, Direction.UpRight)
end

function treasuretown1.Slowking_Action(chara, activator)
UI:SetSpeaker(chara)
UI:SetSpeakerEmotion("Normal")
UI:WaitShowDialogue(".[pause=15].[pause=15]. [pause=15].[pause=15].[pause=15]. [pause=15].[pause=15].[pause=15].") --Slowest thonk of the west 2
UI:WaitShowDialogue("*Snoooooore*...")

GROUND:CharSetEmote(activator, "sweatdrop", 1)
SOUND:PlayBattleSE("EVT_Emote_Sweatdrop")
GAME:WaitFrames(40)

UI:SetSpeaker(activator) --easier than localing it.
UI:SetSpeakerEmotion("Worried")
UI:WaitShowDialogue("(With hardcore sleeping like that, [pause=10]I don't think I can wake him up.)")

end

function treasuretown1.default_initialize(wanderzoneloc, wanderzonesize, wanderspeed, wanderstepmin, wanderstepmax, idledelaymin, idledelaymax)

AI:SetCharacterAI(CH('Eldegoss_roamer'), "what_does_n_stand_for.ai.ground_default", RogueElements.Loc(353, 239), RogueElements.Loc(20, 20), 1, 16, 32, 40, 180) --It's Magic Joel, it's Magic!

end

function treasuretown1.Eldegoss_roamer_Action(chara, activator)

GROUND:CharTurnToChar(chara, activator)

UI:SetSpeaker(chara)
UI:SetSpeakerEmotion("Normal")
UI:WaitShowDialogue("Has any adventurer ever found a dungeon so mind-bendingly weird?")
UI:WaitShowDialogue("I'm not talking about places like the fabled [color=#FFC663]Zero Isle[color] that go on seemingly forever...")
UI:WaitShowDialogue("No, [pause=10]I'm talking about ones where the rooms are stranger than they appear.")
UI:SetSpeakerEmotion("Worried") --Eldegoss has no Emotions.
UI:WaitShowDialogue("Ones where they hide the staircases, [pause=10]ones where grass overtakes the dungeon floors...")
UI:WaitShowDialogue("Things have gotten a lot stranger than before...")

end

function treasuretown1.chapterhidescript()

if SV.chapter.number == 0 then

GROUND:Hide("Slowking")
GROUND:Hide("Eldegoss_roamer")

elseif SV.chapter.number == 1 then

GROUND:Hide("Beautifly")
GROUND:Hide("Swellow")

end

end

return treasuretown1


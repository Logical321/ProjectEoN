--[[
    init.lua
    Created: 11/19/2023 21:13:12
    Description: Autogenerated script file for the map adambooktest.
]]--
-- Commonly included lua functions and data
require 'what_does_n_stand_for.common'

-- Package name
local adambooktest = {}

-- Local, localized strings table
-- Use this to display the named strings you added in the strings files for the map!
-- Ex:
--      local localizedstring = STRINGS.MapStrings['SomeStringName']


-------------------------------
-- Map Callbacks
-------------------------------
---adambooktest.Init(map)
--Engine callback function
function adambooktest.Init(map)

  --This will fill the localized strings table automatically based on the locale the game is 
  -- currently in. You can use the MapStrings table after this line!
  

end

---adambooktest.Enter(map)
--Engine callback function
function adambooktest.Enter(map)

  GAME:FadeIn(20)
  
  adambooktest.Book()

end

---adambooktest.Exit(map)
--Engine callback function
function adambooktest.Exit(map)


end

---adambooktest.Update(map)
--Engine callback function
function adambooktest.Update(map)


end

---adambooktest.GameSave(map)
--Engine callback function
function adambooktest.GameSave(map)


end

---adambooktest.GameLoad(map)
--Engine callback function
function adambooktest.GameLoad(map)

  GAME:FadeIn(20)

end

-------------------------------
-- Entities Callbacks
-------------------------------

function adambooktest.Book()
local result = nil
UI:WaitShowDialogue("Working")

UI:SetChoiceLoc(105,85)
UI:SetBounds(300,300,20,20) --Used to place secondary menu.
UI:SetCenter(true)
UI:SetAutoFinish(true)

choices = {STRINGS:Format(STRINGS.MapStrings['Read']),
    STRINGS:Format(STRINGS.MapStrings['Music']),
    STRINGS:Format(STRINGS.MapStrings['Leave']),}

UI:BeginChoiceMenu("Nothing here lmao", choices, 1, 3)
UI:WaitForChoice()
result = UI:ChoiceResult()

if result == 1 then

adambooktest.deargod()
	
elseif result == 2 then

    UI:ShowMusicMenu({'ADAM_JOURNAL'})
	UI:WaitForChoice()
	result = UI:ChoiceResult()
		if result ~= nil then
			SV.eontestroom.Song = result
		end
  
  adambooktest.Book()
  
else

	GAME:FadeOut(false, 20)
	GAME:WaitFrames(20)
    GAME:EnterGroundMap("electraterhome", "Entrance") --This was the easiest choice to make.
	
end

end

AdamBookMenu = Class('AdamBookMenu')

function adambooktest.deargod()
--150 010
UI:SetBounds(115,010,200,220) --Needed to place secondary menu.
UI:SetChoiceLoc(15,10) --Needed to place primary menu.

UI:WaitForChoice();

	  -- local menu = AdamBookMenu:new() --Needed to get the function to work in the first place. Probably.
	  -- UI:SetCustomMenu(menu,menu) --Spawns the menu, I guess?
	  -- UI:WaitForChoice()
	  
	  -- adambooktest.Book() --Return to the "top menu" of this groundmap.

end

-- function AdamBookMenu:initialize()
-- assert(self, "AdamBookMenu:initialize(): Error, self is nil!") --Then you wouldn't run, muppet.

-- self.menu = RogueEssence.Menu.ScriptableMenu(15, 10, 80, 200, function(input) self:Update(input) end) --I assume it spawns the bloody menu. And also calls 'update'.

-- self:DrawMenu() --runs the DrawMenu function that happens to be in it's group.

-- end

-- function AdamBookMenu:DrawMenu()

  -- --Standard menu divider. Reuse this whenever you need a menu divider at the top for a title. - Palika
  -- self.menu.MenuElements:Add(RogueEssence.Menu.MenuDivider(RogueElements.Loc(8, 8 + 12), self.menu.Bounds.Width - 8 * 2))

  -- --Standard title. Reuse this whenever a title is needed. - Palika 2
  -- self.menu.MenuElements:Add(RogueEssence.Menu.MenuText("The title of something, probably.", RogueElements.Loc(16, 8)))
  
    -- self.menu.MenuElements:Add(RogueEssence.Menu.MenuText("Can this bloody thing work, I would like to make something unique for once.", RogueElements.Loc(16, 54)))

-- end

-- function AdamBookMenu:Update(input)
-- assert(self, "BaseState:Begin(): Error, self is nil!")

  -- if input:JustPressed(RogueEssence.FrameInput.InputType.Cancel) or input:JustPressed(RogueEssence.FrameInput.InputType.Menu) then --Runs when pressing the Cancel button.
    -- _GAME:SE("Menu/Cancel")
    -- _MENU:RemoveMenu() --Supposed to remove menu, but it can also crash.

  -- else

  -- end
-- end

return adambooktest


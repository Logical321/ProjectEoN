--[[
    init.lua
    Created: 09/24/2023 21:04:06
    Description: Autogenerated script file for the map wigglyguildeatcutscene.
]]--
-- Commonly included lua functions and data
require 'what_does_n_stand_for.common'

-- Package name
local wigglyguildeatcutscene = {}

-- Local, localized strings table
-- Use this to display the named strings you added in the strings files for the map!
-- Ex:
--      local localizedstring = STRINGS.MapStrings['SomeStringName']


-------------------------------
-- Map Callbacks
-------------------------------
---wigglyguildeatcutscene.Init(map)
--Engine callback function
function wigglyguildeatcutscene.Init(map)

  --This will fill the localized strings table automatically based on the locale the game is 
  -- currently in. You can use the MapStrings table after this line!
  

end

---wigglyguildeatcutscene.Enter(map)
--Engine callback function
function wigglyguildeatcutscene.Enter(map)

wigglyguildeatcutscene.Commence()

end

---wigglyguildeatcutscene.Exit(map)
--Engine callback function
function wigglyguildeatcutscene.Exit(map)


end

---wigglyguildeatcutscene.Update(map)
--Engine callback function
function wigglyguildeatcutscene.Update(map)


end

---wigglyguildeatcutscene.GameSave(map)
--Engine callback function
function wigglyguildeatcutscene.GameSave(map)


end

---wigglyguildeatcutscene.GameLoad(map)
--Engine callback function
function wigglyguildeatcutscene.GameLoad(map)

  GAME:FadeIn(20)

end

-------------------------------
-- Entities Callbacks
-------------------------------

function wigglyguildeatcutscene.Commence()
local player = CH('PLAYER')
local Chatot = CH('Chatot')
local Wigglytuff = CH('Wigglytuff')
local Chimecho = CH('Chimecho')
local Diglett = CH('Diglett')
local Dugtrio = CH('Dugtrio')
local Crawdaunt = CH('Crawdaunt')
local Bidoof = CH('Bidoof')
local Croagunk = CH('Croagunk')
local Sunflora = CH('Sunflora')
local Loudred = CH('Loudred') --All these local calls are most likely unnecessary. Did it anyways.
local WigglyApple = OBJ('WigglyApple') --This works?

GAME:CutsceneMode(true)
GAME:MoveCamera(358, 205, 1, false)
GROUND:CharSetAnim(Chatot, "Eat", true)
GROUND:CharSetAnim(Chimecho, "Eat", true)
GROUND:CharSetAnim(Diglett, "Wiggle", true)
GROUND:CharSetAnim(Dugtrio, "Wiggle", true)
GROUND:CharSetAnim(Bidoof, "Eat", true)
GROUND:CharSetAnim(Croagunk, "Eat", true)
GROUND:CharSetAnim(Sunflora, "Eat", true)
GROUND:CharSetAnim(Loudred, "Eat", true)
GROUND:CharSetAnim(Crawdaunt, "Walk", true) --No eat anim, use this as substitute.

GROUND:CharSetEmote(Chatot, "eating", 0)
GROUND:CharSetEmote(Chimecho, "eating", 0)
GROUND:CharSetEmote(Diglett, "eating", 0)
GROUND:CharSetEmote(Dugtrio, "eating", 0)
GROUND:CharSetEmote(Bidoof, "eating", 0)
GROUND:CharSetEmote(Croagunk, "eating", 0)
GROUND:CharSetEmote(Sunflora, "eating", 0)
GROUND:CharSetEmote(Loudred, "eating", 0)
GROUND:CharSetEmote(Crawdaunt, "eating", 0)

	local PlayerLoop = false
	local WigglytuffLoop = false --Never let me code again, for I have no idea what I'm doing.
	local AppleLoop = false

	GAME:WaitFrames(40)

-------------------------------------------------- Stuff above is things todo before FadeIn. Below is things that should happen after FadeIn.

local coro1 = TASK:BranchCoroutine(function() --First try at using an 'anonymous function'. Chances are, I'll somehow break it.

while not PlayerLoop do
GROUND:CharSetEmote(player, "eating", 0)
GROUND:CharWaitAnim(player, "walk") --Not every Pok√©mon in the Player Selection has the ability to eat. Walk is used as a substitute.
GROUND:CharWaitAnim(player, "walk")
GROUND:CharWaitAnim(player, "walk")
GROUND:CharSetEmote(player, "", 0)
GROUND:EntTurn(player, Direction.UpRight)
GAME:WaitFrames(40)
GROUND:EntTurn(player,Direction.Right)
end

end)

local coro2 = TASK:BranchCoroutine(function() --Made this function an Anonymous Function as Local Variables cannot be read in non-anonymous functions.

UI:ResetSpeaker(false)
UI:WaitShowTimedDialogue(STRINGS:Format(STRINGS.MapStrings['EatNoises']), 3)
UI:WaitShowTimedDialogue(STRINGS:Format(STRINGS.MapStrings['EatNoises']), 3)
UI:WaitShowTimedDialogue(STRINGS:Format(STRINGS.MapStrings['EatNoises']), 3)
UI:WaitShowTimedDialogue(STRINGS:Format(STRINGS.MapStrings['EatNoises']), 3)
UI:WaitShowTimedDialogue(STRINGS:Format(STRINGS.MapStrings['EatNoises']), 3)

SOUND:FadeOutSE("Dinner Eating", 20)
WigglytuffLoop = true
PlayerLoop = true
AppleLoop = true
GAME:FadeOut(false, 20)

end)

local coro3 = TASK:BranchCoroutine(function() wigglyguildeatcutscene.CameraShenanigans1_Sequence() end)
local coro4 = TASK:BranchCoroutine(function() wigglyguildeatcutscene.CameraShenanigans2_Sequence() end)
local coro5 = TASK:BranchCoroutine(function() 

while not WigglytuffLoop do

GROUND:CharWaitAnim(Wigglytuff, "walk")
GROUND:CharWaitAnim(Wigglytuff, "walk")
GROUND:CharWaitAnim(Wigglytuff, "twirl")
GROUND:CharWaitAnim(Wigglytuff, "twirl")
GAME:WaitFrames(30)

end

end)

local coro6 = TASK:BranchCoroutine(function() 

while not AppleLoop do
--GROUND:Hide(WigglyApple)
GAME:WaitFrames(75)
--GROUND:Unhide(WigglyApple)

GROUND:MoveObjectToPosition(WigglyApple, 364, 140, 3)
GROUND:MoveObjectToPosition(WigglyApple, 364, 132, 2)
GROUND:MoveObjectToPosition(WigglyApple, 364, 130, 1)

GAME:WaitFrames(5)

GROUND:MoveObjectToPosition(WigglyApple, 364, 132, 1)
GROUND:MoveObjectToPosition(WigglyApple, 364, 140, 2)
GROUND:MoveObjectToPosition(WigglyApple, 364, 214, 4)
end

end)
 
 TASK:JoinCoroutines({coro1,coro2,coro3,coro4,coro5,coro6})
 
GAME:WaitFrames(25)
GAME:CutsceneMode(false)
GAME:EnterGroundMap("wigglyguildbedmoon", "Entrance")
end

function wigglyguildeatcutscene.CameraShenanigans1_Sequence()
GAME:MoveCamera(0, 0, 400, true) --Needs to Coroutine with Dialogue
end

function wigglyguildeatcutscene.CameraShenanigans2_Sequence()
SOUND:FadeInSE("Dinner Eating", 20)
GAME:FadeIn(20)
end

return wigglyguildeatcutscene

